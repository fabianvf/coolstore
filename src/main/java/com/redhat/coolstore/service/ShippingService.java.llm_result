
## Reasoning

1. **Issue 1 & 2:** The `javax.ejb` package is used in Java EE for Enterprise JavaBeans. However, Quarkus uses the `jakarta.ejb` package instead. Therefore, we need to replace the `javax.ejb` import statements with `jakarta.ejb`.

2. **Issue 3:** Remote EJBs are not supported in Quarkus. Instead, we can use REST functionality to expose our services. We need to replace the `@Remote` annotation with `@Path` and provide an endpoint. Since REST services are stateless, we can remove the `@Stateless` annotation. For each public method, we need to add `@GET` and `@Path` annotations and replace `@Remote` with `@QueryParam` if needed.

3. **Issue 4:** Stateless EJBs can be converted to a CDI bean by replacing the `@Stateless` annotation with a scope such as `@ApplicationScoped`.

## Updated File

```java
package com.redhat.coolstore.service;

import java.math.BigDecimal;
import java.math.RoundingMode;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.QueryParam;
import com.redhat.coolstore.model.ShoppingCart;

@Path("/shipping")
public class ShippingService {

    @Inject
    ShippingService shippingService;

    @GET
    @Path("/calculateShipping")
    public double calculateShipping(@QueryParam("sc") ShoppingCart sc) {

        if (sc != null) {

            if (sc.getCartItemTotal() >= 0 && sc.getCartItemTotal() < 25) {

                return 2.99;

            } else if (sc.getCartItemTotal() >= 25 && sc.getCartItemTotal() < 50) {

                return 4.99;

            } else if (sc.getCartItemTotal() >= 50 && sc.getCartItemTotal() < 75) {

                return 6.99;

            } else if (sc.getCartItemTotal() >= 75 && sc.getCartItemTotal() < 100) {

                return 8.99;

            } else if (sc.getCartItemTotal() >= 100 && sc.getCartItemTotal() < 10000) {

                return 10.99;

            }

        }

        return 0;

    }

    @GET
    @Path("/calculateShippingInsurance")
    public double calculateShippingInsurance(@QueryParam("sc") ShoppingCart sc) {

        if (sc != null) {

            if (sc.getCartItemTotal() >= 25 && sc.getCartItemTotal() < 100) {

                return getPercentOfTotal(sc.getCartItemTotal(), 0.02);

            } else if (sc.getCartItemTotal() >= 100 && sc.getCartItemTotal() < 500) {

                return getPercentOfTotal(sc.getCartItemTotal(), 0.015);

            } else if (sc.getCartItemTotal() >= 500 && sc.getCartItemTotal() < 10000) {

                return getPercentOfTotal(sc.getCartItemTotal(), 0.01);

            }

        }

        return 0;
    }

    private static double getPercentOfTotal(double value, double percentOfTotal) {
        return BigDecimal.valueOf(value * percentOfTotal)
                .setScale(2, RoundingMode.HALF_UP)
                .doubleValue();
    }

}
```

Note: The `@Inject` annotation is used to inject the `ShippingService` class. This is because the `@Path` annotation creates a new instance of the class, and we need to use the same instance for both methods. In a real-world scenario, we would separate the two methods into different classes.