
## Reasoning

1. **Issue 1 & 2:** The `javax.ejb` package is used in Java EE for Enterprise JavaBeans. However, Quarkus uses the `jakarta.ejb` package instead. Therefore, we need to replace the `javax.ejb` import statements with `jakarta.ejb`.

2. **Issue 3:** Remote EJBs are not supported in Quarkus. Instead, we can use REST functionality to expose our services. We need to replace the `@Remote` annotation with `@Path` and provide an endpoint. Since REST services are stateless by nature, we can remove the `@Stateless` annotation. For every public method, we need to add `@GET`, `@Path`, and `@QueryParam` annotations as needed.

3. **Issue 4:** Stateless EJBs can be converted to a CDI bean by replacing the `@Stateless` annotation with a scope such as `@ApplicationScoped`.

## Updated File

```java
package com.redhat.coolstore.service;

import java.math.BigDecimal;
import java.math.RoundingMode;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.QueryParam;
import jakarta.ws.rs.core.Response;

import com.redhat.coolstore.model.ShoppingCart;

@Path("/shipping")
public class ShippingService {

    @GET
    @Path("/calculateShipping")
    public Response calculateShipping(@QueryParam("cartItemTotal") BigDecimal cartItemTotal) {

        if (cartItemTotal == null) {
            return Response.status(Response.Status.BAD_REQUEST).build();
        }

        if (cartItemTotal.compareTo(BigDecimal.ZERO) >= 0 && cartItemTotal.compareTo(BigDecimal.valueOf(25)) < 0) {
            return Response.ok(2.99).build();
        } else if (cartItemTotal.compareTo(BigDecimal.valueOf(25)) >= 0 && cartItemTotal.compareTo(BigDecimal.valueOf(50)) < 0) {
            return Response.ok(4.99).build();
        } else if (cartItemTotal.compareTo(BigDecimal.valueOf(50)) >= 0 && cartItemTotal.compareTo(BigDecimal.valueOf(75)) < 0) {
            return Response.ok(6.99).build();
        } else if (cartItemTotal.compareTo(BigDecimal.valueOf(75)) >= 0 && cartItemTotal.compareTo(BigDecimal.valueOf(100)) < 0) {
            return Response.ok(8.99).build();
        } else if (cartItemTotal.compareTo(BigDecimal.valueOf(100)) >= 0 && cartItemTotal.compareTo(BigDecimal.valueOf(10000)) < 0) {
            return Response.ok(10.99).build();
        }

        return Response.ok(0).build();

    }

    @GET
    @Path("/calculateShippingInsurance")
    public Response calculateShippingInsurance(@QueryParam("cartItemTotal") BigDecimal cartItemTotal) {

        if (cartItemTotal == null) {
            return Response.status(Response.Status.BAD_REQUEST).build();
        }

        if (cartItemTotal.compareTo(BigDecimal.valueOf(25)) >= 0 && cartItemTotal.compareTo(BigDecimal.valueOf(100)) < 0) {
            return Response.ok(getPercentOfTotal(cartItemTotal, 0.02)).build();
        } else if (cartItemTotal.compareTo(BigDecimal.valueOf(100)) >= 0 && cartItemTotal.compareTo(BigDecimal.valueOf(500)) < 0) {
            return Response.ok(getPercentOfTotal(cartItemTotal, 0.015)).build();
        } else if (cartItemTotal.compareTo(BigDecimal.valueOf(500)) >= 0 && cartItemTotal.compareTo(BigDecimal.valueOf(10000)) < 0) {
            return Response.ok(getPercentOfTotal(cartItemTotal, 0.01)).build();
        }

        return Response.ok(0).build();
    }

    private static double getPercentOfTotal(BigDecimal value, double percentOfTotal) {
        return BigDecimal.valueOf(value.doubleValue() * percentOfTotal)
                .setScale(2, RoundingMode.HALF_UP)
                .doubleValue();
    }

}
```

Note that we have replaced the `@Stateless` and `@Remote` annotations with `@Path`. We have also added `@QueryParam` annotations to the method parameters. The methods have been annotated with `@GET` and `@Path`. The `calculateShipping` method now returns a `Response` object. The `getPercentOfTotal` method has been made static since it does not use any instance variables.